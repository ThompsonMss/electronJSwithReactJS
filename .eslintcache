[{"C:\\Users\\USUARIO\\Documents\\agenciatrack\\projelectron\\src\\index.js":"1","C:\\Users\\USUARIO\\Documents\\agenciatrack\\projelectron\\src\\App.js":"2","C:\\Users\\USUARIO\\Documents\\agenciatrack\\projelectron\\src\\globalStyles.js":"3","C:\\Users\\USUARIO\\Documents\\agenciatrack\\projelectron\\src\\styles.js":"4"},{"size":262,"mtime":1607804164453,"results":"5","hashOfConfig":"6"},{"size":10404,"mtime":1607880972851,"results":"7","hashOfConfig":"6"},{"size":2038,"mtime":1607813249215,"results":"8","hashOfConfig":"6"},{"size":1198,"mtime":1607811990558,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"13teake",{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\USUARIO\\Documents\\agenciatrack\\projelectron\\src\\index.js",[],["21","22"],"C:\\Users\\USUARIO\\Documents\\agenciatrack\\projelectron\\src\\App.js",["23","24","25"],"import { useEffect, useState } from \"react\";\nimport {\n  Container,\n  WrapperLeft,\n  WrapperRight,\n  Title,\n  Row,\n  TitleList,\n  DescList,\n} from \"./styles\";\nimport { ResizableBox } from \"react-resizable\";\n\n/* MATERIAL UI */\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport BeachAccessIcon from \"@material-ui/icons/BeachAccess\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\n\nimport DriveEtaIcon from \"@material-ui/icons/DriveEta\";\nimport EmojiPeopleIcon from \"@material-ui/icons/EmojiPeople\";\n\nconst { ipcRenderer } = window.require(\"electron\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  margin: 10,\n  table: {\n    minWidth: 300,\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#FF6800\",\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nconst CssTextField = withStyles({\n  root: {\n    width: \"100%\",\n    margin: \"10px\",\n    \"& label.Mui-focused\": {\n      color: \"#FF6800\",\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#FF6800\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"red\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"yellow\",\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#FF6800\",\n      },\n    },\n  },\n})(TextField);\n\nfunction App() {\n  const classes = useStyles();\n\n  const [loading, setLoading] = useState(false);\n  const [disableButtonSocket, setDisableButtonSocket] = useState(true);\n  const [disableButtonMessageSocket, setDisableButtonMessageSocket] = useState(\n    true\n  );\n\n  const [host, setHost] = useState(\"localhost\");\n  const [user, setUser] = useState(\"postgres\");\n  const [pass, setPass] = useState(\"admin\");\n  const [database, setDatabase] = useState(\"acessodedicado\");\n  const [apt, setApt] = useState(\"\");\n  const [cond, setCond] = useState(\"\");\n\n  const [data, setData] = useState([]);\n  const [dataLogs, setDataLogs] = useState([]);\n  const [listenLog, setListenLog] = useState(null);\n\n  useEffect(() => {\n    ipcRenderer.on(\"endQuery\", (event, message) => {\n      setData(message);\n      setLoading(false);\n    });\n\n    ipcRenderer.on(\"errorQuery\", (event, message) => {\n      alert(\"Não foi possível realizar consulta.\");\n      setLoading(false);\n    });\n\n    ipcRenderer.on(\"errorSocket\", (event, message) => {\n      alert(\"Não foi possível se conectar no servidor de socket.\");\n      setDisableButtonSocket(false);\n      setDisableButtonMessageSocket(true);\n    });\n\n    ipcRenderer.on(\"closeSocket\", (event, message) => {\n      alert(\"Servidor de socket encerrado.\");\n      setDisableButtonSocket(false);\n      setDisableButtonMessageSocket(true);\n    });\n\n    ipcRenderer.on(\"messageSocket\", (event, message) => {\n      setDisableButtonSocket(true);\n      setDisableButtonMessageSocket(false);\n      setListenLog(message);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (listenLog != null) {\n      const aux = dataLogs;\n      if (aux.length >= 20) {\n        aux.splice(aux.length - 1, 1);\n        aux.unshift(listenLog);\n      } else {\n        aux.unshift(listenLog);\n      }\n\n      setDataLogs(aux);\n    }\n  }, [listenLog]);\n\n  function execQuery() {\n    if (!apt) {\n      alert(\"Preencha um ID APT\");\n      return;\n    }\n\n    if (!cond) {\n      alert(\"Preencha um ID COND\");\n      return;\n    }\n\n    if (!host) {\n      alert(\"Preencha um HOST\");\n      return;\n    }\n\n    if (!user) {\n      alert(\"Preencha um USER\");\n      return;\n    }\n\n    if (!pass) {\n      alert(\"Preencha um PASSWORD\");\n      return;\n    }\n\n    if (!database) {\n      alert(\"Preencha um DATABASE\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const params = {\n        host: host,\n        user: user,\n        password: pass,\n        database: database,\n        id_apt: apt,\n        id_cond: cond,\n      };\n\n      ipcRenderer.send(\"execQuery\", params);\n    } catch (e) {\n      alert(\"Erro ao se conectar com banco de dados.\");\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Container>\n      <ResizableBox\n        width={400}\n        height={Infinity}\n        minConstraints={[300, Infinity]}\n        maxConstraints={[500, Infinity]}\n        resizeHandles={[\"e\"]}\n        axis=\"x\"\n      >\n        <WrapperLeft>\n          <Title\n            style={{ marginTop: \"12px\", paddingBottom: \"10px\" }}\n            color=\"#FFF\"\n          >\n            <span>Logs</span>\n          </Title>\n\n          <Row style={{ marginBottom: \"10px\", marginTop: \"10px\" }}>\n            <Button\n              onClick={() => {\n                const id = Math.floor(Math.random() * 999999);\n                alert(`Mensagem enviada: ${id}`);\n                ipcRenderer.send(\"ping\", `Mensagem: ${id}`);\n              }}\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ marginRight: \"10px\" }}\n              disabled={disableButtonMessageSocket}\n            >\n              Enviar Ping\n            </Button>\n\n            <Button\n              onClick={() => {\n                ipcRenderer.send(\"newConnection\", true);\n              }}\n              variant=\"contained\"\n              style={{\n                backgroundColor: disableButtonSocket\n                  ? \"rgba(0,0,0,0.6)\"\n                  : \"#000\",\n                color: \"#FFF\",\n              }}\n              disabled={disableButtonSocket}\n            >\n              Nova Conexão\n            </Button>\n          </Row>\n\n          <List className={classes.root}>\n            {dataLogs.map((item, index) => (\n              <ListItem\n                key={index}\n                style={{ marginBottom: \"10px\", background: \"#ff8c3f\" }}\n              >\n                <ListItemAvatar>\n                  <Avatar style={{ background: \"rgba(0,0,0,.1)\" }}>\n                    {item?.tipo == \"car\" ? (\n                      <DriveEtaIcon />\n                    ) : (\n                      <EmojiPeopleIcon />\n                    )}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={\n                    <TitleList>{item?.no ? item?.no : \"Opa!\"}</TitleList>\n                  }\n                  secondary={\n                    <DescList>\n                      {item?.desc ? item?.desc : \"Recebi um socket diferente\"}\n                    </DescList>\n                  }\n                />\n              </ListItem>\n            ))}\n          </List>\n        </WrapperLeft>\n      </ResizableBox>\n\n      <WrapperRight>\n        <Title color=\"#888\">\n          <span>Query in the database</span>\n        </Title>\n        <Row>\n          <CssTextField\n            className={classes.margin}\n            label=\"Host:\"\n            id=\"host\"\n            value={host}\n            onChange={(e) => setHost(e.target.value)}\n          />\n          <CssTextField\n            className={classes.margin}\n            label=\"Database:\"\n            id=\"database\"\n            value={database}\n            onChange={(e) => setDatabase(e.target.value)}\n          />\n          <CssTextField\n            className={classes.margin}\n            label=\"User:\"\n            id=\"user\"\n            value={user}\n            onChange={(e) => setUser(e.target.value)}\n          />\n        </Row>\n\n        <Row>\n          <CssTextField\n            className={classes.margin}\n            label=\"Password:\"\n            id=\"password\"\n            value={pass}\n            onChange={(e) => setPass(e.target.value)}\n          />\n          <CssTextField\n            className={classes.margin}\n            label=\"ID Cond:\"\n            id=\"condominio\"\n            type=\"number\"\n            value={cond}\n            onChange={(e) => setCond(e.target.value)}\n          />\n          <CssTextField\n            className={classes.margin}\n            label=\"ID Apt:\"\n            id=\"apartamento\"\n            type=\"number\"\n            value={apt}\n            onChange={(e) => setApt(e.target.value)}\n          />\n        </Row>\n\n        <div\n          style={{\n            marginLeft: \"10px\",\n            marginTop: \"10px\",\n            marginBottom: \"-20px\",\n          }}\n        >\n          <Button onClick={execQuery} variant=\"contained\" color=\"primary\">\n            {loading ? \"Consultado...\" : \"Consultar\"}\n          </Button>\n        </div>\n\n        <TableContainer\n          style={{\n            marginTop: \"40px\",\n            width: \"98%\",\n            marginLeft: \"10px\",\n          }}\n          component={Paper}\n          className=\"scrollbarHide\"\n        >\n          <Table className={classes.table} aria-label=\"customized table\">\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>Condomínio</StyledTableCell>\n                <StyledTableCell align=\"center\">Apartamento</StyledTableCell>\n                <StyledTableCell align=\"right\">Morador</StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.map((row, index) => (\n                <StyledTableRow key={index + \"\"}>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {row.no_cond}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">{row.no_apt}</StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {row.no_morador}\n                  </StyledTableCell>\n                </StyledTableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </WrapperRight>\n    </Container>\n  );\n}\n\nexport default App;\n","C:\\Users\\USUARIO\\Documents\\agenciatrack\\projelectron\\src\\globalStyles.js",[],"C:\\Users\\USUARIO\\Documents\\agenciatrack\\projelectron\\src\\styles.js",[],["26","27"],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":20,"column":8,"nodeType":"34","messageId":"35","endLine":20,"endColumn":23},{"ruleId":"36","severity":1,"message":"37","line":150,"column":6,"nodeType":"38","endLine":150,"endColumn":17,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":260,"column":33,"nodeType":"42","messageId":"43","endLine":260,"endColumn":35},{"ruleId":"28","replacedBy":"44"},{"ruleId":"30","replacedBy":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'BeachAccessIcon' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataLogs'. Either include it or remove the dependency array.","ArrayExpression",["48"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["46"],["47"],"no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: [dataLogs, listenLog]",{"range":"51","text":"52"},[4042,4053],"[dataLogs, listenLog]"]